name: Continuous Integration / Continuous Delivery

on:
  push:
    branches:
      - main
      - dev

jobs:
  check_deploy_reqs:
    if: ${{!contains(github.event.head_commit.message, '[ci skip]')}}
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.check.outputs.api }}
      app: ${{ steps.check.outputs.app }}
      cicd: ${{ steps.check.outputs.cicd }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Check if deployment is required
        id: check
        run: |
          python scripts/check_deploy_reqs.py
          grep -q "API_CHANGED=True" component_changes.txt && echo "api=true" >> "$GITHUB_OUTPUT" || echo "api=''" >> "$GITHUB_OUTPUT"
          grep -q "APP_CHANGED=True" component_changes.txt && echo "app=true" >> "$GITHUB_OUTPUT" || echo "app=''" >> "$GITHUB_OUTPUT"
          grep -q "CICD_CHANGED=True" component_changes.txt && echo "cicd=true" >> "$GITHUB_OUTPUT" || echo "cicd=''" >> "$GITHUB_OUTPUT"

  prepare_api:
    needs: check_deploy_reqs
    if: ${{needs.check_deploy_reqs.outputs.api || needs.check_deploy_reqs.outputs.cicd }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: pip

      - name: Create and start venv
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Format check
        run: black --check .

      # - name: Run linter
      #   run: flake8 --config=.flake8 .

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: python-app
          path: |
            .
            !venv/

  deploy_api:
    needs: prepare_api
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: python-app
          path: .

      - name: Deploy
        uses: azure/webapps-deploy@v2
        id: deploy-to-webapp
        with:
          app-name: laimpost3
          slot-name: Production
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_104C845506804B03BD2C008C8E1D19AB }}

  prepare_and_deploy_app:
    needs: check_deploy_reqs
    if: ${{needs.check_deploy_reqs.outputs.app || needs.check_deploy_reqs.outputs.cicd }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/laimpost.com/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: npm install --prefix laimpost.com

      - name: Check formatting
        run: npm run format:check --prefix laimpost.com

      # - name: Run linter
      #   run:  npm run lint:check install --prefix laimpost.com

      # - name: Run Unit Tests
      #   run:  npm run test install --prefix laimpost.com

      # - name: Build
      #   run: npm run build --prefix laimpost.com
      #   env:
      #     API_BASE_URL: ${{ secrets.API_BASE_URL }}

      - name: Deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: '/laimpost.com'
          # deployment_environment: ${{github.ref == 'refs/heads/main' && 'Production' || 'dev'}}
        env:
          API_BASE_URL: ${{ secrets.API_BASE_URL }}

  create_version:
    needs: [deploy_api, prepare_and_deploy_app]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure git user
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Fetch tags
        run: git fetch --tags

      - name: Create version tag
        id: create-tag
        run: |
          DATE=$(date +%Y%m%d)
          BUILD=$(git tag -l "$DATE*" | wc -l | xargs printf "%03d")
          VERSION="$DATE.$BUILD"
          git tag $VERSION
          echo "::set-output name=version::$VERSION"

      - name: Push tag
        run: git push origin ${{ steps.create-tag.outputs.version }}

  check_pull_request:
    needs: [deploy_api, prepare_and_deploy_app]
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check Pull Request
        id: check_pr
        uses: vsoch/pull-request-action@f9e7f419d6b44935f6b0458fad17077269caaf71
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST_BRANCH: main
          PULL_REQUEST_FROM_BRANCH: dev
          PULL_REQUEST_UPDATE: true
          PULL_REQUEST_TITLE: Merge dev into main
          PUll_REQUEST_BODY: Automated pull request for merging dev into main. It's best not to update this description because it will be overwritten when new commits are pushed.
          PASS_ON_ERROR: true

      - name: Update Pull Request
        if: ${{ steps.check_pr.outputs.pull_request_url }}
        run: |
          curl -u username:${{ secrets.GITHUB_TOKEN }} -X PATCH -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository_owner}}/${{ github.event.repository.name }}/pulls/${{ steps.check_pr.outputs.pull_request_number }} \
           -d '{"body": "Merge _dev_ branch into _main_. **A new release will be published if qualifying changes have been made**. It is best not to edit this description because it will be overwritten when new commits are pushed. <br> <br> <br> '"$(curl -u username:${{ secrets.GITHUB_TOKEN }}  -H 'Accept: application/vnd.github.v3+json' \
          https://api.github.com/repos/${{ github.repository_owner}}/${{ github.event.repository.name }}/pulls/${{ steps.check_pr.outputs.pull_request_number }}/commits \
           | grep message | sed 's/^[ \t]*//;s/[ \t]*$//;s/[",]//g;s/message: //' |  sed -z 's/\n/\\n/g')"'"}'

           curl -u username:${{ secrets.GITHUB_TOKEN }} -X POST -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/pulls/${{ steps.check_pr.outputs.pull_request_number }}/requested_reviewers -d '{"reviewers": ["didaktio"]}'
