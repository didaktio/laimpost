name: Continuous Integration / Continuous Delivery

on:
  push:
    branches:
      - main
      # - dev

jobs:
  check_deploy_reqs:
    if: ${{!contains(github.event.head_commit.message, '[ci skip]')}}
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.check.outputs.api }}
      app: ${{ steps.check.outputs.app }}
      cicd: ${{ steps.check.outputs.cicd }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: actions/setup-python@v4
        if: ${{ !github.event.act  }}
        with:
          python-version: 3.12
          allow-prereleases: true

      - name: Check deployment(s) requirement
        id: check
        env:
          COMMIT_INFO_FILE: commit_info.txt
          COMPONENT_CHANGES_FILE: component_changes.txt
        run: |
          (git log -1 --oneline && git diff --name-only ${{ github.event.before }} ${{ github.event.after }}) >> "$COMMIT_INFO_FILE"
          python .github/scripts/check_deploy_reqs.py "$COMMIT_INFO_FILE" "$COMPONENT_CHANGES_FILE" &&
          grep -q -e "API=True\|CICD=True\|FORCE=True" "$COMPONENT_CHANGES_FILE" && echo "api=true" >> "$GITHUB_OUTPUT"
          grep -q -e "APP=True\|CICD=True\|FORCE=True" "$COMPONENT_CHANGES_FILE" && echo "app=true" >> "$GITHUB_OUTPUT"

  deploy_api:
    needs: check_deploy_reqs
    if: ${{needs.check_deploy_reqs.outputs.api }}
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Set up Python
        if: ${{ !github.event.act  }}
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
          allow-prereleases: true
          cache: pip

      # - name: Create and start venv
      #   run: |
      #     python -m venv venv
      #     source venv/bin/activate

      # - name: Install deps
      #   run: |
      #     pip install -r requirements.txt
      #     npm ci

      - name: Install deps
        run: npm ci

      # - name: Format check
      #   run: black --check .

      # - name: Run linter
      #   run: flake8 --config=.flake8 .

      - name: Deploy
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
          DJANGO_CSRF_TRUSTED_ORIGINS: ${{ secrets.DJANGO_CSRF_TRUSTED_ORIGINS }}
          DJANGO_CORS_ALLOWED_ORIGINS: ${{ secrets.DJANGO_CORS_ALLOWED_ORIGINS }}
          DB_NAME: ${{ secrets.DB_NAME}}
          DB_HOST: ${{ secrets.DB_HOST}}
          DB_PORT: ${{ secrets.DB_PORT}}
          DB_USER: ${{ secrets.DB_USER}}
          DB_PASS: ${{ secrets.DB_PASS}}
          AWS_VPC_SECURITY_GROUP_ID: ${{ secrets.AWS_VPC_SECURITY_GROUP_ID }}
          AWS_VPC_SUBNET_ID_1: ${{ secrets.AWS_VPC_SUBNET_ID_1 }}
          AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}
          AWS_S3_CDN_DOMAIN: ${{ secrets.AWS_S3_CDN_DOMAIN }}
          AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
          AWS_DEPLOYMENT_BUCKET: ${{ secrets.AWS_DEPLOYMENT_BUCKET }}
          AWS_S3_ACCESS_KEY_ID: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
          AWS_S3_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
        run: serverless deploy -s production --conceal

  deploy_app:
    needs: check_deploy_reqs
    if: ${{needs.check_deploy_reqs.outputs.app }}
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/laimpost.com/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: npm ci --prefix laimpost.com

      - name: Check formatting
        run: npm run format:check --prefix laimpost.com

      - name: Run linter
        run: npm run lint:check --prefix laimpost.com

      # - name: Run Unit Tests
      #   run:  npm run test install --prefix laimpost.com

      # - name: Build
      #   run: npm run build --prefix laimpost.com
      #   env:
      #     API_BASE_URL: ${{ secrets.API_BASE_URL }}
      #     API_ALLOWED_ORIGIN: ${{ secrets.API_ALLOWED_ORIGIN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::750566351359:role/github-actions
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to Amplify
        env:
          APP_ID: ${{ secrets.AWS_APP_ID }}
        run: aws amplify start-job --app-id $APP_ID --branch-name main --job-type RELEASE

  create_version:
    needs: [deploy_api, deploy_app]
    if: github.ref == 'refs/heads/main' && !github.event.act
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure git user
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Fetch tags
        run: git fetch --tags

      - name: Create version tag
        id: create-tag
        run: |
          DATE=$(date +%Y%m%d)
          BUILD=$(git tag -l "$DATE*" | wc -l | xargs printf "%03d")
          VERSION="$DATE.$BUILD"
          git tag $VERSION
          echo "::set-output name=version::$VERSION"

      - name: Push tag
        run: git push origin ${{ steps.create-tag.outputs.version }}

  check_pull_request:
    needs: [deploy_api, deploy_app]
    if: github.ref == 'refs/heads/dev' && !github.event.act
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check Pull Request
        id: check_pr
        uses: vsoch/pull-request-action@f9e7f419d6b44935f6b0458fad17077269caaf71
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST_BRANCH: main
          PULL_REQUEST_FROM_BRANCH: dev
          PULL_REQUEST_UPDATE: true
          PULL_REQUEST_TITLE: Merge dev into main
          PUll_REQUEST_BODY: Automated pull request for merging dev into main. It is best not to update this description because it will be overwritten when new commits are pushed.
          PASS_ON_ERROR: true

      - name: Update Pull Request
        if: ${{ steps.check_pr.outputs.pull_request_url }}
        run: |
          curl -u username:${{ secrets.GITHUB_TOKEN }} -X PATCH -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository_owner}}/${{ github.event.repository.name }}/pulls/${{ steps.check_pr.outputs.pull_request_number }} \
           -d '{"body": "Merge _dev_ branch into _main_. **A new release will be published if qualifying changes have been made**. It is best not to edit this description because it will be overwritten when new commits are pushed. <br> <br> <br> '"$(curl -u username:${{ secrets.GITHUB_TOKEN }}  -H 'Accept: application/vnd.github.v3+json' \
          https://api.github.com/repos/${{ github.repository_owner}}/${{ github.event.repository.name }}/pulls/${{ steps.check_pr.outputs.pull_request_number }}/commits \
           | grep message | sed 's/^[ \t]*//;s/[ \t]*$//;s/[",]//g;s/message: //' |  sed -z 's/\n/\\n/g')"'"}'

           curl -u username:${{ secrets.GITHUB_TOKEN }} -X POST -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/pulls/${{ steps.check_pr.outputs.pull_request_number }}/requested_reviewers -d '{"reviewers": ["didaktio"]}'
